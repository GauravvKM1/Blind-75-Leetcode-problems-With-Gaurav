class Solution {
  public:
    // Function to merge K sorted linked list.
    
    Node* MergeTwoSortedList(Node* &l1,Node* &l2){
     if(l1==NULL)return l2;
     if(l2==NULL)return l1;

     if(l1->data<=l2->data){
       l1->next=MergeTwoSortedList(l1->next,l2);
       return l1;
     }
     else{
       l2->next=MergeTwoSortedList(l1,l2->next);
       return l2;
     }
     return NULL;
    }
    Node* partitionAndMerge(int start,int end,vector<Node*>& arr){
        if(start>end)return NULL;
        if(start==end){
            // single list hai
            return arr[end];
        }

        int mid=start+(end-start)/2;
        Node* L1=partitionAndMerge(start,mid,arr);
        Node* L2=partitionAndMerge(mid+1,end,arr);

        return MergeTwoSortedList(L1,L2);
    }
    Node* mergeKLists(vector<Node*>& arr) {
        // Your code here
        int k=arr.size();
        if(k==0)return NULL;
       return partitionAndMerge(0,k-1,arr);
    }
};
