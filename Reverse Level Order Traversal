

vector<int> reverseLevelOrder(Node *root)
{
    // code here
    vector<int>ans;
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node* temp=q.front();q.pop();
        if(temp==NULL){
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
             ans.push_back(temp->data);
             if(temp->right){
                 q.push(temp->right);
             }
             if(temp->left){
                 q.push(temp->left);
             }
        }
    }
    reverse(ans.begin(),ans.end());
    return ans;
}



## Leetcode Solution

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
    vector<vector<int>>ans;
    if(root==NULL)return ans;
    queue<TreeNode*>q;
    q.push(root);
    q.push(NULL);
    vector<int>inner;
    while(!q.empty()){
        TreeNode* temp=q.front();q.pop();
        if(temp==NULL){
            if(!q.empty()){
                q.push(NULL);
            }
            ans.push_back(inner);
            inner.clear();
        }
        else{
             inner.push_back(temp->val);
                if(temp->left) {
                    q.push(temp->left);
                }
                if (temp->right) {
                    q.push(temp->right);
                }
        }
    }
    reverse(ans.begin(),ans.end());
    return ans;
    }
};
