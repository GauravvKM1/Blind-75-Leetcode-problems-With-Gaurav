bool solve(Node* &root,int &k,int node,int &ans){
    if(root==NULL){
        return false;
    }
    
    if(root->data==node){
        return true;
    }
    
    int left=solve(root->left,k,node,ans);
    int right=solve(root->right,k,node,ans);
    
    if (left || right) {
        k--;
    }
    
    // Separate if statement
    if (k == 0) {
        ans = root->data;
        k=INT_MAX;
    }
    
    return left || right; // Return true if found, otherwise false

}

int kthAncestor(Node *root, int k, int node)
{
    // Code here
    int ans=-1;
    solve(root,k,node,ans);
    return ans;
}

















void  solve(Node* &root,int &k,int node,vector<int> &ans,vector<int>&result){
    if(root==NULL){
        return ;
    }
    
     
     if(root->data==node){
        result=ans;
        return;
    }
    ans.push_back(root->data);
    solve(root->left,k,node,ans,result);
    solve(root->right,k,node,ans,result);
    // backtrack
    ans.pop_back();
}

int kthAncestor(Node *root, int k, int node)
{
    // Code here
    vector<int>ans;
    vector<int>result;
    // int ans=-1;
   
    solve(root,k,node,ans,result);
     if(result.size()<k) return -1;
    return result[result.size()-k];
}
